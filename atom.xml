<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[踏雪无痕]]></title>
  <link href="http://jaronli.github.io/atom.xml" rel="self"/>
  <link href="http://jaronli.github.io/"/>
  <updated>2016-02-28T20:31:01+08:00</updated>
  <id>http://jaronli.github.io/</id>
  <author>
    <name><![CDATA[李吉龙（Jaron）]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java静态工厂方法与构造方法]]></title>
    <link href="http://jaronli.github.io/blog/2016/02/26/javajing-tai-gong-han-fang-fa-yu-gou-zao-fang-fa/"/>
    <updated>2016-02-26T16:51:40+08:00</updated>
    <id>http://jaronli.github.io/blog/2016/02/26/javajing-tai-gong-han-fang-fa-yu-gou-zao-fang-fa</id>
    <content type="html"><![CDATA[<p><img src="http://7xj0s4.com1.z0.glb.clouddn.com/life_1.jpg" alt="life-1" />
    >java中new用于创建对象，构造方法用于初始化对象。但是创建、初始化是一起的，
不可单独存在。
    创建一个类的时候，通常可以提供两种产生类的对象的方式,常用的是提供public
的构造器。还有一种是静态工厂方法。</p>

<!--more-->


<h2>静态工厂方法</h2>

<pre><code>静态工厂方法首先是静态的，它会返回一个类的实例。首先举一个常见例子
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static Boolean valueOf(boolean b){
</span><span class='line'>    return b?Boolean.TRUE:Boolean.FALSE;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>静态工厂方法提供类的实例相比构造器有以下优点</h3>

<p>1.静态工厂方法有名称。
    在一个类中若要有多个构造器那么唯一的方法就是重载，但是它们的名称确是相同
的。静态工厂方法给你可以仔细思考有意义的方法名称的机会。
2.不必每次调用时都创建一个新的对象。
    不可变类以及单例情形等是不需要每次使用对象都创建一次的。使用静态工厂方法
允许预先在类中构建好实例，调用方法时返回此实例。即每次调用虽然返回一个对象但
并没有频繁的执行创建对象的操作。
3.可以返回原返回类型的任何子类型的对象。
    对于这一点可以参照设计模式中的工厂模式。通过再静态工厂方法中添加条件判断
语句，根据不同的条件返回不同类型的对象。如Animal类有Dog和People两个子类，可以
通过像静态工厂方法中传入一个参数，通过判断参数来确定是返回Dog还是People类的对
象。
4.创建参数化类型实例时，使代码变得更加简洁。</p>

<h3>静态工厂方法提供实例的缺点</h3>

<p>1.如果类中构造器私有化，那么不能进行子类化。
    构造器私有化意味着不能再类的外部进行调用，因此不能够被继承。但是这种情况
反而仍然可以使用复合的方式来将类的功能带到其他的类中。
2.它们与普通的静态方法没有任何区别</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP简介]]></title>
    <link href="http://jaronli.github.io/blog/2015/05/16/httpjian-jie/"/>
    <updated>2015-05-16T23:36:34+08:00</updated>
    <id>http://jaronli.github.io/blog/2015/05/16/httpjian-jie</id>
    <content type="html"><![CDATA[<p><img src="http://7xj0s4.com1.z0.glb.clouddn.com/life_5.jpg-blog" alt="life-5" /></p>

<h2>1.URL</h2>

<p>统一资源定位符(url) 是互联网上标准资源的地址.<!--more--><br/>
它实际上说明了如何从一个精确固定的位置获取资源<br/>
一般的URL包括三部分.首先是使用的协议,常用为HTTP<br/>
然后是主机名加端口号(默认80)这两部分用:隔开<br/>
最后一部分是想要请求的资源</p>

<h2>2.协议类型</h2>

<p>协议是一种处理请求的方案,代表用什么样的方式来完成请求.常用协议包括:</p>

<ul>
<li>HTTP 超文本传输协议</li>
<li>FTP 文件传输协议</li>
<li>SMTP 简单邮件传输协议 等</li>
</ul>


<h2>3.简述</h2>

<hr />

<p>一次http操作称为一个事物.它由一条请求命令和一个<br/>
响应结果组成.每个请求都会包含一个方法.常用方法:</p>

<ul>
<li>GET    : 从服务器上获得命名资源</li>
<li>PUT    : 将数据存储于服务器中</li>
<li>DELETE : 从服务器上删除资源</li>
<li>POST   : 将客户端数据发送给一个服务器网关程序</li>
</ul>


<hr />

<p>然而http是应用层协议,由于它假设传输是可靠的,因此<br/>
它只负责请求资源与响应而不关注在网络中怎样与服务器<br/>
通信的问题.TCP/IP协议负责完成内容传输.<br/>
层次说明 : <br/>
HTTP             应用层<br/>
TCP              传输层<br/>
IP               网络层<br/>
TCP实际为http传输建立一条连接(可理解为信息传输的道 ) <br/>
TCP连接过程就像打公司办公室某人电话的过程,先是拨打公司<br/>
号码进入正确机构再次拨打想要联系的人的分机号码.</p>

<hr />

<p>http请求及响应过程说明<br/>
1.在地址栏中输入URL<br/>
2.浏览器将URL中解析出服务器主机名<br/>
3.浏览器将服务器主机名解析成服务器IP地址<br/>
4.浏览器将端口号(如果有的话)从URL中解析出来<br/>
5.浏览器建立一条与服务器的TCP连接<br/>
6.浏览器向服务器发送一个HTTP请求<br/>
7.服务器向浏览器发送一个响应<br/>
8.关闭链接  显示资源</p>

<hr />

<p>相关概念</p>

<ul>
<li>网关</li>
<li>代理</li>
<li>缓存</li>
<li>VPN</li>
<li>路由</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在github上用octopress搭建自己的博客]]></title>
    <link href="http://jaronli.github.io/blog/2015/05/09/zai-githubshang-yong-octopressda-jian-zi-ji-de-bo-ke/"/>
    <updated>2015-05-09T15:37:39+08:00</updated>
    <id>http://jaronli.github.io/blog/2015/05/09/zai-githubshang-yong-octopressda-jian-zi-ji-de-bo-ke</id>
    <content type="html"><![CDATA[<ul>
<li><h2>octopress介绍</h2></li>
<li><h2>前提工具</h2>

<p>安装git,ruby,ruby-dev等</p></li>
</ul>


<!--more-->


<ul>
<li><h2>搭建过程</h2></li>
</ul>


<hr />

<pre><code>git clone git://github.com/imathis/octopress.git  octopress    
cd octopress    
</code></pre>

<p>用vim 修改 Gemfile文件的source为 <a href="http://ruby.taobao.org">http://ruby.taobao.org</a></p>

<pre><code>bundle install    
rake install    
</code></pre>

<hr />

<p>  申请一个github帐号(如果没有),创建一个名为：username(你的github用户名）.github.io的Repo <br/>
  <em>注意：创建的名字不能有任何不同</em></p>

<hr />

<p> 开始刷新自己的blog</p>

<pre><code>rake setup_github_pages  
rake new_post["title(blog的题目)"] #创建你想要的文章主题 编辑产生的markdown文件  
rake generate #编译产生html文件，此处要求有JS环境，如果没有可以使用  
sudo apt-get install nodejs #如果有忽略此处  
rake preview #可以在本机的4000端口查看生成情况.  
rake deploy #将你的博客上传到github pages，用http://username.github.io 查看.  
</code></pre>

<hr />

<h4>配置自己的博客</h4>

<p>将_config.yml中的title,subtitle,author等修改成自己的信息。</p>

<hr />

<h4>添加社交分享</h4>

<p>octopress 默认带有社交分享功能，如twitter,facebook这些在<em>config.yml中可以看见。我们可以 <br/>
添加QQ，微信，人人等社交工具。当然我们只要使用第三方库即可。如:<a href="http://www.jiathis.com">jiathis</a> <br/>
1.将social_share: true加入到</em>config.yml中 <em>注意冒号后面有空格</em> <br/>
2.在source/_includes/post/sharing.html中添加:</p>

<pre><code>{ %if site.social_share % }   
{ % include post/social_media.html % }   
{ % endif % }   
</code></pre>

<p>3.访问<a href="http://www.jiathis.com">http://www.jiathis.com</a>,复制想要的分享类型的代码，放入新建文件 <br/>
source/_includes/post/social_media.html</p>

<hr />

<h4>使用SEO</h4>

<hr />

<h3>添加一个导航页签:如about</h3>

<pre><code>rake new_page["about"]   
</code></pre>

<p>这将生成一个source/about/index.markdown，在这里面输入想要的内容 <br/>
编辑 source/_includes/custom/navigation.html,添加</p>

<pre><code>&lt;li&gt;&lt;a href="http://jaronli.github.io/about"&gt;作者&lt;/a&gt;&lt;/li&gt;  
</code></pre>

<hr />

<h4>添加侧边栏内容:如About me</h4>

<ul>
<li>编辑文件source/_includes/custom/asides/about.html</li>
<li>在_config.yml中，把custom/asides/about.html添加到default_post中，中间逗号隔开</li>
</ul>

]]></content>
  </entry>
  
</feed>
