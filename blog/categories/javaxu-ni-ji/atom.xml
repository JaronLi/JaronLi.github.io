<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java虚拟机 | 踏雪无痕]]></title>
  <link href="http://www.dxyds.com/blog/categories/javaxu-ni-ji/atom.xml" rel="self"/>
  <link href="http://www.dxyds.com/"/>
  <updated>2016-04-13T22:04:49+08:00</updated>
  <id>http://www.dxyds.com/</id>
  <author>
    <name><![CDATA[李吉龙（Jaron）]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java虚拟机一]]></title>
    <link href="http://www.dxyds.com/blog/2016/03/30/javaxu-ni-ji-%5B%3F%5D/"/>
    <updated>2016-03-30T23:52:06+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/03/30/javaxu-ni-ji-[?]</id>
    <content type="html"><![CDATA[<p>学习Java不能够不了解JVM，有关JVM的知识分为    <br/>
<em>JVM的运行时数据区组成   <br/>
</em>各个数据区容易发生的异常    <br/>
<em>垃圾回收算法以及垃圾回收器      <br/>
</em>class结构   <br/>
*类加载机制  <br/>
等几部分。</p>

<!--more-->


<p></p>

<h3>各个部分简单介绍</h3>

<p>JVM运行时数据区分为程序计数器，本地方法栈，栈（这三项是线程私有，不共享的），堆，方法区（这两项是线程共享的）。   <br/>
其中HotSpot（sun提供的虚拟机）将本地方法栈与栈合二为一。  <br/>
1.栈内存放的是栈帧（一块空间），每个栈帧对应一个被调用的方法。符合栈的后进先出特性，每次运行一个方法就会产生一个  <br/>
栈帧压入栈内，记录了包括局部变量表 操作数 方法返回地址等信息，如果方法内继续调用方法，那么会再入栈一个栈帧（递归  <br/>
容易造成栈溢出）当执行完一个方法时，栈帧弹出。<br/>
2.堆内存放对象本身以及数组等。堆可分为新生代与老年代（在垃圾回收部分具体介绍）。  <br/>
3.方法区存放了使用的类的信息以及运行时常量池等</p>

<h3>两个溢出的程序</h3>

<p>1.堆溢出  <br/>
使堆溢出的关键是不断产生不被回收的对象。  <br/>
<code>   
public class HeapOutOfMemory{   
    public static void main(String []args){     
        List&lt;String&gt; list = new ArrayList&lt;String&gt;()；   
        while(true){    
            list.add("abc");    
        }   
    }   
}   
</code>  <br/>
2.栈溢出  <br/>
使栈溢出要不断的产生栈帧，递归的调用方法正适合做案例。    <br/>
<code>   
public class StackOverFlow{     
    public StackOverFlow(){     
        new StackOverFlow();    
    }  
    public static void main(String[] args){     
        StackOverFlow sof = new StackOverFlow();    
    }   
}   
</code></p>
]]></content>
  </entry>
  
</feed>
