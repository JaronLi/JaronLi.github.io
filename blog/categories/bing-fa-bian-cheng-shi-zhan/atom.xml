<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 并发编程实战 | 踏雪无痕]]></title>
  <link href="http://www.dxyds.com/blog/categories/bing-fa-bian-cheng-shi-zhan/atom.xml" rel="self"/>
  <link href="http://www.dxyds.com/"/>
  <updated>2016-04-24T22:32:19+08:00</updated>
  <id>http://www.dxyds.com/</id>
  <author>
    <name><![CDATA[李吉龙（Jaron）]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[并发变成实战一:线程安全基础]]></title>
    <link href="http://www.dxyds.com/blog/2016/04/24/bing-fa-bian-cheng-shi-zhan-%5B%3F%5D-xian-cheng-an-quan-ji-chu/"/>
    <updated>2016-04-24T00:07:10+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/04/24/bing-fa-bian-cheng-shi-zhan-[?]-xian-cheng-an-quan-ji-chu</id>
    <content type="html"><![CDATA[<h3>为什么使用多线程</h3>

<p>  多线程是非常重要的一部分知识，如果没有多线程那么会出现什么情况？&lt;&ndash;!more&ndash;>试想单线程时出现阻塞 <br/>
的情况下，整个程序都停止执行，这种情况下是否会想有没有更好的方式？多线程能够在一个线程因为等待I/O <br/>
或者其他情况阻塞时继续执行其他线程，充分利用cpu资源。</p>

<!--more-->


<h3>相关名词</h3>

<p>  1.竞态条件:多个线程竞争访问同一资源时，如果对资源的访问顺序敏感，则称存在竞态条件。 <br/>
  2.数据竞争:访问共享非final变量时未采用同步机制。 <br/>
  3.原子操作:一系列不可分割（执行过程中不可中断，插入其他线程执行相关代码）的操作。</p>

<h3>安全性</h3>

<p>  1.多线程的安全性主要起源于对状态变量的共享以及可变。对最常用的作为线程安全的示例</p>

<p>  (1)关于计数器 <br/>
  （2）关于不可变条件</p>

<h3>解决线程安全性办法</h3>

<p>  使用线程同步机制： <br/>
  1.synchronized（使用内置锁） <br/>
      (1)内置锁也叫互斥锁，一次只能有一个线程获得。 <br/>
      (2)可重入。一个线程获得了内置锁后，可以继续访问其他被这把锁保护的方法。如果没有这个特性，那么会 <br/>
      发生死锁。   等待一个不可能获得的锁。 <br/>
      (3)可保证锁定的内容为原子操作。 <br/>
  2.volatile关键字 <br/>
      (1)volatile能够保证可见性，但不能够保证操作的原子性。 <br/>
      (2)对volatile的理解要先理解java内存模型。(对volatile详解见并发编程实战二：volatile与synchronized)
  3.显示锁
  4.原子变量</p>
]]></content>
  </entry>
  
</feed>
