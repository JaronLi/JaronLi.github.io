<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | 踏雪无痕]]></title>
  <link href="http://www.dxyds.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://www.dxyds.com/"/>
  <updated>2016-04-24T22:26:37+08:00</updated>
  <id>http://www.dxyds.com/</id>
  <author>
    <name><![CDATA[李吉龙（Jaron）]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[并发变成实战一:线程安全基础]]></title>
    <link href="http://www.dxyds.com/blog/2016/04/24/bing-fa-bian-cheng-shi-zhan-%5B%3F%5D-xian-cheng-an-quan-ji-chu/"/>
    <updated>2016-04-24T00:07:10+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/04/24/bing-fa-bian-cheng-shi-zhan-[?]-xian-cheng-an-quan-ji-chu</id>
    <content type="html"><![CDATA[<h3>为什么使用多线程</h3>

<p>  多线程是非常重要的一部分知识，如果没有多线程那么会出现什么情况？&lt;&ndash;!more&ndash;>试想单线程时出现阻塞 <br/>
的情况下，整个程序都停止执行，这种情况下是否会想有没有更好的方式？多线程能够在一个线程因为等待I/O <br/>
或者其他情况阻塞时继续执行其他线程，充分利用cpu资源。 <br/>
&lt;&ndash;!more&ndash;></p>

<h3>相关名词</h3>

<p>  1.竞态条件:多个线程竞争访问同一资源时，如果对资源的访问顺序敏感，则称存在竞态条件。 <br/>
  2.数据竞争:访问共享非final变量时未采用同步机制。 <br/>
  3.原子操作:一系列不可分割（执行过程中不可中断，插入其他线程执行相关代码）的操作。</p>

<h3>安全性</h3>

<p>  1.多线程的安全性主要起源于对状态变量的共享以及可变。对最常用的作为线程安全的示例</p>

<p>  (1)关于计数器 <br/>
  （2）关于不可变条件</p>

<h3>解决线程安全性办法</h3>

<p>  使用线程同步机制： <br/>
  1.synchronized（使用内置锁） <br/>
      (1)内置锁也叫互斥锁，一次只能有一个线程获得。 <br/>
      (2)可重入。一个线程获得了内置锁后，可以继续访问其他被这把锁保护的方法。如果没有这个特性，那么会 <br/>
      发生死锁。   等待一个不可能获得的锁。 <br/>
      (3)可保证锁定的内容为原子操作。 <br/>
  2.volatile关键字 <br/>
      (1)volatile能够保证可见性，但不能够保证操作的原子性。 <br/>
      (2)对volatile的理解要先理解java内存模型。(对volatile详解见并发编程实战二：volatile与synchronized)
  3.显示锁
  4.原子变量</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淘宝技术这十年-淘宝架构变化]]></title>
    <link href="http://www.dxyds.com/blog/2016/04/15/tao-bao-ji-zhu-zhe-shi-nian-tao-bao-jia-gou-bian-hua/"/>
    <updated>2016-04-15T11:45:04+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/04/15/tao-bao-ji-zhu-zhe-shi-nian-tao-bao-jia-gou-bian-hua</id>
    <content type="html"><![CDATA[<p>  每年光棍节都是狂欢的日子，同时也是淘宝网强势宣传网站高并发的日子。看着 <br/>
几百亿的成交量，其隐藏的是一个高并发，高性能的网站作为支撑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java虚拟机一]]></title>
    <link href="http://www.dxyds.com/blog/2016/03/30/javaxu-ni-ji-%5B%3F%5D/"/>
    <updated>2016-03-30T23:52:06+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/03/30/javaxu-ni-ji-[?]</id>
    <content type="html"><![CDATA[<p>学习Java不能够不了解JVM，有关JVM的知识分为    <br/>
* JVM的运行时数据区组成   <br/>
* 各个数据区容易发生的异常    <br/>
* 垃圾回收算法以及垃圾回收器      <br/>
* class结构   <br/>
* 类加载机制  <br/>
等几部分。</p>

<!--more-->


<p></p>

<h3>各个部分简单介绍</h3>

<p>JVM运行时数据区分为程序计数器，本地方法栈，栈（这三项是线程私有，不共享的），堆，方法区（这两项是线程共享的）。   <br/>
其中HotSpot（sun提供的虚拟机）将本地方法栈与栈合二为一。  <br/>
1.栈内存放的是栈帧（一块空间），每个栈帧对应一个被调用的方法。符合栈的后进先出特性，每次运行一个方法就会产生一个  <br/>
栈帧压入栈内，记录了包括局部变量表 操作数 方法返回地址等信息，如果方法内继续调用方法，那么会再入栈一个栈帧（递归  <br/>
容易造成栈溢出）当执行完一个方法时，栈帧弹出。<br/>
2.堆内存放对象本身以及数组等。堆可分为新生代与老年代（在垃圾回收部分具体介绍）。  <br/>
3.方法区存放了使用的类的信息以及运行时常量池等</p>

<h3>两个溢出的程序</h3>

<p>1.堆溢出  <br/>
使堆溢出的关键是不断产生不被回收的对象。  <br/>
<code>   
public class HeapOutOfMemory{   
    public static void main(String []args){     
        List&lt;String&gt; list = new ArrayList&lt;String&gt;()；   
        while(true){    
            list.add("abc");    
        }   
    }   
}   
</code>  <br/>
2.栈溢出  <br/>
使栈溢出要不断的产生栈帧，递归的调用方法正适合做案例。    <br/>
<code>   
public class StackOverFlow{     
    public StackOverFlow(){     
        new StackOverFlow();    
    }  
    public static void main(String[] args){     
        StackOverFlow sof = new StackOverFlow();    
    }   
}   
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java参数传递]]></title>
    <link href="http://www.dxyds.com/blog/2016/03/21/javacan-shu-chuan-di/"/>
    <updated>2016-03-21T21:32:57+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/03/21/javacan-shu-chuan-di</id>
    <content type="html"><![CDATA[<p>在java方法里传递参数，往往会有传递值还是传递引用的说法。像下面这段代码</p>

<!--more-->


<p>  <br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Test{
</span><span class='line'>    String s = new String(&ldquo;abc&rdquo;);
</span><span class='line'>    StringBuffer sb = new StringBuffer(&ldquo;abs&rdquo;);
</span><span class='line'>    int i = 5;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;public static void main(String[] args){
</span><span class='line'>    Test test = new Test();
</span><span class='line'>    test.deliver(s,sb,i);
</span><span class='line'>    System.out.println(s+" "+sb+" "+i);
</span><span class='line'>}
</span><span class='line'>public void deliver(String s,StringBuffer sb,int i){
</span><span class='line'>    s = "s";
</span><span class='line'>    sb.append("abs");
</span><span class='line'>    i = 6;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;结果：
</span><span class='line'>abc absabs 5</span></code></pre></td></tr></table></div></figure></p>

<p>大家对这个结果或许会感到疑惑，不是对象传递引用，基本类型传递值么？由于基本类型 <br/>
变量存储的是直接的值，对象的变量存储的是堆中对象的地址。因此无论是基本类型还是 <br/>
对象传递的本质都是传递的变量（存储再栈中）的值。 <br/>
对这个结果进行一下解释：对于i的输出相信大家没有什么疑惑，对于s的输出，再方法里面
最开始s指向的是abc，但是s=&ldquo;s&#8221;这句话并不是改变abc，仅仅是对方法中的s进行了重新赋值 <br/>
，此时s指向的是&#8221;s&#8221;。对于将对象传递到方法中，仅仅改变对象内部的值的时候才会引起对象 <br/>
的改变。区分出哪个是对变量重新赋值，哪个是改变对象的值，相信上面的例子足够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java静态工厂方法与构造方法]]></title>
    <link href="http://www.dxyds.com/blog/2016/02/26/javajing-tai-gong-han-fang-fa-yu-gou-zao-fang-fa/"/>
    <updated>2016-02-26T16:51:40+08:00</updated>
    <id>http://www.dxyds.com/blog/2016/02/26/javajing-tai-gong-han-fang-fa-yu-gou-zao-fang-fa</id>
    <content type="html"><![CDATA[<blockquote><p>java中new用于创建对象，构造方法用于初始化对象。但是创建、初始化是一起的，
不可单独存在。  <br/>
    创建一个类的时候，通常可以提供两种产生类的对象的方式,常用的是提供public
的构造器。还有一种是静态工厂方法。</p></blockquote>

<!--more-->


<h2>静态工厂方法</h2>

<p>   静态工厂方法首先是静态的，它会返回一个类的实例。首先举一个常见例子</p>

<pre><code>public static Boolean valueOf(boolean b){
    return b?Boolean.TRUE:Boolean.FALSE;
}
</code></pre>

<h3>静态工厂方法提供类的实例相比构造器有以下优点</h3>

<p>1.静态工厂方法有名称。 <br/>
   在一个类中若要有多个构造器那么唯一的方法就是重载，但是它们的名称确是相同 <br/>
的。静态工厂方法给你可以仔细思考有意义的方法名称的机会。 <br/>
2.不必每次调用时都创建一个新的对象。 <br/>
   不可变类以及单例情形等是不需要每次使用对象都创建一次的。使用静态工厂方法 <br/>
允许预先在类中构建好实例，调用方法时返回此实例。即每次调用虽然返回一个对象但 <br/>
并没有频繁的执行创建对象的操作。 <br/>
3.可以返回原返回类型的任何子类型的对象。 <br/>
   对于这一点可以参照设计模式中的工厂模式。通过再静态工厂方法中添加条件判断 <br/>
语句，根据不同的条件返回不同类型的对象。如Animal类有Dog和People两个子类，可以 <br/>
通过像静态工厂方法中传入一个参数，通过判断参数来确定是返回Dog还是People类的对 <br/>
象。 <br/>
4.创建参数化类型实例时，使代码变得更加简洁。</p>

<h3>静态工厂方法提供实例的缺点</h3>

<p>1.如果类中构造器私有化，那么不能进行子类化。 <br/>
   构造器私有化意味着不能再类的外部进行调用，因此不能够被继承。但是这种情况 <br/>
反而仍然可以使用复合的方式来将类的功能带到其他的类中。 <br/>
2.它们与普通的静态方法没有任何区别</p>
]]></content>
  </entry>
  
</feed>
